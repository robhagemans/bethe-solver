#ifndef DET_DEF
#define DET_DEF

#include "det.h"

/*************************************************************************************************/
/*************************************************/
/* from Numerical Recipes in C, section 2.1, p. 46:
/* LU decomposition 
/* and efficient determinant algorithm.
/*
/**/


// LU decomposition
//
template <class number>
	void decomposeLU (Square<number>& a, vector<int>& indx, int& d)
{
	const char* here = "decomposeLU";
	const number TINY = 1.0e-20;
	int i, imax, j, k;
	number big, dum, sum, temp;

	int n = a.size();
	if (n == 0) throw Exception(here, exc_ZeroArray);
	vector< number > vv(n);
	d = 1;
	for (i = 0; i < n; i++) {
		big = 0.0;
		for (j = 0; j < n; j++)
		//      if ((temp = fabs(a[i][j])) > big) big = temp;
			if ((abs(temp = a[i][j])) > abs(big)) big = temp;
		if (big == 0.0) throw Exception(here, exc_Singular);
		vv[i] = 1.0/big;
	}
	for (j = 0; j < n; j++) {
		for (i = 0; i < j; i++) {
			sum = a[i][j];
			for (k = 0; k < i; k++) sum -= a[i][k] * a[k][j];
			a[i][j] = sum;
		}
		big = 0.0;
		for (i = j; i < n; i++) {
			sum = a[i][j];
			for (k = 0; k < j; k++) sum -= a[i][k] * a[k][j];
			a[i][j] = sum;
			//      if ((dum = vv[i]*fabs(sum)) >= big) {
			if ((abs(dum = vv[i]*sum)) >= abs(big)) {
				big = dum;
				imax = i;
			}
		}
		if (j != imax) {
			for (k = 0; k < n; k++) {
				dum = a[imax][k];
				a[imax][k] = a[j][k];
				a[j][k] = dum;
			}
			d = -d;
			vv[imax] = vv[j];
		}
		indx[j] = imax; 
		if (a[j][j] == 0.0) a[j][j] = TINY;
		if (j !=n-1) {
			dum = 1.0/(a[j][j]);
			for (i = j + 1; i < n; i++) a[i][j] *= dum;
		}
	}
}

template <class number>
	void backsubLU (Square<number>& a, vector<int>& indx, vector<number>& b)
{
  int i, ii=0, ip, j;
  number sum;

  int n = a.size();
  for (i = 0; i < n; i++) {
    ip = indx[i];
    sum = b[ip];
    b[ip] = b[i];
    if (ii != 0)
      for (j = ii-1; j < i; j++) sum -= a[i][j] * b[j];
    else if (sum != 0.0) 
      ii = i + 1;
    b[i] = sum;
  }
  for (i = n - 1; i >= 0; i--) {
    sum = b[i];
    for (j = i + 1; j < n; j++) sum -= a[i][j] * b[j];
    b[i] = sum/a[i][i];
  }
}

#endif
